* Recipe App
Source: https://www.udemy.com/course/django-python-advanced

Requirements:
        Python version 3.7
        Docker
        Docker Compose : easily runs docker from our project location. helps to manage different services.
        Travis CI : automate testing and linting (flake8 - linting tool)
        Postgre : production grade database

git clone git@github.com:ajangelam/recipe-app-api.git
cd ~/tutorials/

* Terms
 - Viewsets : structure of API, provide necessary endpoints for managing objects
 - Serializers : to provide validations to our requests APIs and help convert json objects to django database models
 - Unit Tests : checks that your code works. Steps: 1) Setup 2) Execution 3) Assert.
 - Alpine : lighter version in docker
 -

 * URLS
 - Package Manager (Python) : https://pypi.org
 - Docker : https://hub.docker.com/
 - Travis CI : https://travis-ci.org

* Docker Setup
 - Dockerfile
        FROM python:3.7-alpine # FROM <IMAGE_NAME>:<TAG_NAME>
        MAINTAINER Angela Misa # MAINTAINER <MAINTANER_NAME>

        # ENVIRONMENT VARIABLES
        ENV PYTHONUNBUFFERED 1 # UNBUFFERED MODE, DOESNT ALLOW BUFFER OUTPUTS AND JUST PRINT THEM DIRECTLY

        # INSTALL REQUIREMENTS
        COPY ./requirements.txt /requirements.txt # COPY REQUIREMENTS INSIDE DOCKER IMAGE
        RUN pip install -r /requirements.txt

        RUN mkdir /app
        WORKDIR /app # SET AS DEFAULT DIRECTORY
        COPY ./app /app # COPY APP DIRECTORY INSIDE DOCKER IMAGE

        RUN adduser -D user # ADD USER
        USER user
 - Run docker file
     cd ~/tutorials/recipe-app-api
     docker build .

* Docker Compose Setup
 - docker-compose.yml
        version: "3" # docker version

        services:
          app: # Service called 'app'
            build: # Build section for configuration
              context: . # Context directory. '.' is for current directory.
            ports: # Ports configuration
              - "8020:8000" # Outside and Docker Image Port
            volumes: # Map Volume from Outside to the Docker Container
              - ./app:/app
            command: > # Command to run app in our container
              sh -c "python manage.py runserver 0.0.0.0:8020" # Run command using shell - django
 - Run docker compose build
        docker-compose build

* Install Django Admin in Docker Container
  - Run service
     Usage: docker-compose run <SERVICE_NAME> <COMMANDS_EXECUTED_IN_CONTAINER>
     Example: docker-compose run app sh -c "django-admin.py startproject app ."
  - Shell Command for Django Admin:
    "django-admin.py startproject app ."
        django-admin.py startproject app # Runs django admin commands from requirements:Django then startproject command and start new project called 'app' in the current location/directory.
  - Create new app called 'core' in django directory
   docker-compose run app sh -c "python manage.py startapp core"

* Travis CI Setup
 - .travis.yml
        language: python
        python:
          - "3.6"

        services:
          - docker

        before_script: pip install docker-compose

        script:
          - docker-compose run app sh -c "python manage.py test && flake8"
- Enable repository in travis.org
- Every push in repo will run travis build script

* Run Unit test in Docker
 - it looks for all files/modules beginning with "test".
 docker-compose run app sh -c "python manage.py test -v"
 - with linting flake8 tool
         docker-compose run app sh -c "python manage.py test && flake8"

* Requirements Setup
requirements.txt
        Django>=2.1.3,<2.2.0 # Install django that is greater than or equals to 2.1.3 BUT less than 2.2.0
        djangorestframework>=3.9.0,<3.10.0
        flake8>=3.6.0,<3.7.0 # Linting tool. Config is in <WORKING_DIR>/.flake8

d